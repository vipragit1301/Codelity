using System;
using System.Linq;
using System.Collections.Generic;
// you can also use other imports, for example:
// using System.Collections.Generic;

// you can write to stdout for debugging purposes, e.g.
// Console.WriteLine("this is a debug message");

class Solution {
      public int solution(int[] A, int[] B, int[] C)
        {
            // write your code in C# 6.0 with .NET 4.5 (Mono)
            if (A == null || B == null || C == null || A.Length != B.Length)
                return -1;
            int lower = 0;
            int upper = C.Length;
            while (lower <= upper)
            {
                int mid = (lower + upper) / 2;
                if (canNailall(A, B, C, mid))
                    upper = mid - 1;
                else
                    lower = mid + 1;
            }
            if (lower > C.Length || lower < 1)
                return -1;
            else
                return lower;
        }
        private bool canNailall(int[] A, int[] B, int[] C, int nailsCount)
        {
            int Cmax = C.Max();
            Byte[] nailsAvailable = new Byte[Cmax + 1];
            for (int i = 0; i < nailsCount; i++)
            {
                nailsAvailable[C[i]] = 1;
            }
            int Bmax = B.Max();
            int[] upperBound = new int[Bmax + 1];
            for (int j = 0; j < A.Length; j++)
            {
                int l = A[j];
                int r = B[j];
                 if (l > Cmax || r > Cmax)
                    return false;
                if (nailsAvailable[l] == 1 || nailsAvailable[r] == 1)  // boundary case
                {
                    upperBound[r] = nailsAvailable[l] == 1 ? l : r;
                    continue;
                }
                if (l <= upperBound[r] && upperBound[r] <= r)
                    continue;
                int k = l;
                while (k <= r)
                {
                    if (nailsAvailable[k] == 1)
                    {
                        upperBound[r] = k;
                        break;
                    }
                    k++;
                }
                if (l > upperBound[r] || r < upperBound[r])
                    return false;
            }
            return true;
        }
}
